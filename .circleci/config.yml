version: 2.1

#TODO: To enable matrix, Consider https://github.com/winksaville/circleci-matrix

# Define defaults
_defaults: &defaults
    # Make sure that .profile is sourced to local::lib
    shell: /bin/bash --login -eo pipefail

# Define aliases for simplification
aliases:
  - &store_artifacts
    store_artifacts:
      path: /tmp/artifact/

job_filters: &job_filters
  branches:
    ignore:
      - /1\.2\..*/
      - /1\.3\..*/
      - /1\.4\..*/
      - /1\.5\..*/
      - /1\.6\..*/

# Reuseable commands
commands:

  prove:
    steps:
      - run:
          command: |
             if [ "x$COVERAGE" == "x1" ]
             then
               export HARNESS_PERL_SWITCHES="$HARNESS_PERL_SWITCHES -MDevel::Cover=-ignore,^/|^utils/|^x?t/|\.lttc$,-blib,0"
             fi
             # Coverage explicitly without parallellism to prevent resource contention
             # when Devel::Cover writes coverage database on process-exit
             BROWSER=$BROWSER prove -j2 --recurse \
                   --pgtap-option dbname=lsmbinstalltest \
                   --pgtap-option username=postgres \
                   --pgtap-option psql=.circleci/psql-wrap \
                   --feature-option tags=~@wip t/ xt/
      - run:
          command: |
            while [ $(pidof plackup) ];
            do
              kill -SIGTERM `pidof plackup`
              echo -n "."
              sleep 5
            done
            echo " done"
      - run:
          command: |
            mkdir -p /tmp/artifact/logs;
            mkdir -p /tmp/artifact/screens;
            cp logs/* /tmp/artifact/logs || true;
            cp screens/* /tmp/artifact/screens || true;
          when: always
      - run:
          name: Upload coverage data
          command: |
            if [ "x$COVERAGE" == "x1" ];
            then
              cover -report coveralls
              cover -report text > /tmp/artifact/coverage.txt
            fi
      - *store_artifacts

  prep_env:
    parameters:
      perl:
        type: string
    description: "Prepare environment"
    steps:
      - checkout
      - run:
          # TODO: Update the CircleCI dev images instead
          name: Update NodeJS to 15.x
          command: |
            curl -sL https://deb.nodesource.com/setup_15.x | sudo -E bash -
            sudo apt-get install -y nodejs
      - restore_cache:
          keys:
            # Find a cache corresponding to this specific package-lock.json checksum
            # when this file is changed, this key will fail
            - v1-npm-deps-{{ checksum "./package-lock.json" }}
            # Find the most recently generated cache used from any branch
            - v1-npm-deps-
      - run:
          name: Make Dojo
          command: |
            make dojo
      - save_cache:
          key: v1-npm-deps-{{ checksum "./package-lock.json" }}
          paths:
            - node_modules
      # Freshen up CPAN
      - restore_cache:
          keys:
            # Get latest cache for the current specs
            - v2-cpm-<< parameters.perl >>-{{ .Branch }}-{{ checksum "./cpanfile" }}
            # Fall back to the latest for the current branch
            - v2-cpm-<< parameters.perl >>-{{ .Branch }}-
            # Fall back to the latest for master
            - v2-cpm-<< parameters.perl >>-master-
            # Don't fall back any further
      - run:
          name: Refresh modules from CPAN
          command: |
            cpm install --local-lib-contained=$HOME/perl5 --no-test \
              --resolver=metacpan \
              --with-develop \
              --feature=starman \
              --feature=latex-pdf-ps \
              --feature=openoffice \
              --feature=xls \
              --feature=edi
            cpm install --local-lib-contained=$HOME/perl5 --no-test \
              --resolver=metacpan \
                JSON::PP~4.03 Gazelle
            if [ "x$COVERAGE" == "x1" ]
            then
              cpm install --local-lib-contained=$HOME/perl5 --no-test \
                  --resolver=metacpan \
                  Devel::Cover \
                  Devel::Cover::Report::Coveralls
            fi
      - save_cache:
           key: v2-cpm-<< parameters.perl >>-{{ .Branch }}-{{ checksum "./cpanfile" }}
           paths:
             - $HOME/perl5
      - run:
          name: Set up dirs and files
          command: |
            mkdir -p logs screens
            # these commands are in start.sh of the Perl container too:
            cp doc/conf/ledgersmb.conf.default ledgersmb.conf
            sed -i \
                -e "s/\(cache_templates = \).*\$/cache_templates = 1/g" \
                -e "s/\(host = \).*\$/\1$POSTGRES_HOST/g" \
                -e "s/\(port = \).*\$/\1$POSTGRES_PORT/g" \
                -e "s/\(default_db = \).*\$/\1$DEFAULT_DB/g" \
                -e "s%\(sendmail   = \).*%#\1/usr/sbin/ssmtp%g" \
                -e "s/# \(smtphost = \).*\$/\1mailhog:1025/g" \
                -e "s/# \(backup_email_from = \).*\$/\1lsmb-backups@example.com/g" \
                -e "s/#dojo_built = 1/dojo_built = 0/" \
              ledgersmb.conf
            # Patch Weasel
            sudo cp -r utils/test/Weasel/* $HOME/perl5/lib/perl5/Weasel/
      - run:
          name: Set up host IP & BASE variables
          command: |
                echo "export LSMB_BASE_URL=http://$(hostname -I |awk '{print $1}'):5000" >> $BASH_ENV
                echo "export PSGI_BASE_URL=http://$(hostname -I |awk '{print $1}'):5762" >> $BASH_ENV
                source $BASH_ENV


  start_plackup:
    description: "Start plackup"
    steps:
      - run:
          command: |
            PERL5OPT="$PERL5OPT -MDevel::Cover=-ignore,^/|^utils/|^x?t/|\.lttc$,-blib,0" \
            LSMB_BASE_URL=http://$(hostname -I |awk '{print $1}'):5000 \
            PSGI_BASE_URL=http://$(hostname -I |awk '{print $1}'):5762 \
                    plackup -I$HOME/project/lib -I$HOME/project/old/lib \
                    -s Gazelle --port 5762 --workers=2 --max-reqs-per-child=50000 \
                    $HOME/project/bin/ledgersmb-server.psgi
            echo "Plackup done!"
            touch plackup-done
          background: true

  start_proxy:
    description: "Start the proxy"
    parameters:
      proxy:
        type: string
        default: nginx
    steps:
      - run:
          command: |
            /usr/local/bin/<< parameters.proxy >>.sh
          background: true

  env-info:
    description: |
      Save information about the job enviroment, to be stored as artifacts and inspected later
    parameters:
      data-dir:
        default: ~/.ccidiag/env-info
        description: |
          Directory in which to output job environment information (will be created if necessary)
        type: string
    steps:
    - run:
        command: |
          echo "----------------------------------------------------------------------------------------------------"
          echo "This will run through a set of commands, dumping their output as a file to be uploaded as an artifact"
          echo "If the command doesn't exist the file will be empty, and CircleCI will ignore it during the upload"
          echo "Can be used to discover enviromental information and installed packages"
          echo "----------------------------------------------------------------------------------------------------"
          echo "Working directory is: $(pwd)"
          echo "Output will be stored in: <<parameters.data-dir>> (creating it if it does not exist...)"
          echo "----------------------------------------------------------------------------------------------------"
          mkdir -p <<parameters.data-dir>>
          cat /proc/cpuinfo > <<parameters.data-dir>>/proc_cpuinfo.log || true
          dpkg -l > <<parameters.data-dir>>/dpkg.log || true
          yarn list > <<parameters.data-dir>>/yarn.log || true
          brew list --versions > <<parameters.data-dir>>/brew.log || true
          yarn global list > <<parameters.data-dir>>/yarn-global.log || true
          gem query --local > <<parameters.data-dir>>/gem.log || true
          npm --version > <<parameters.data-dir>>/npm-version.log || true
          npm ls --global > <<parameters.data-dir>>/npm-global.log || true
          npm ls > <<parameters.data-dir>>/npm.log || true
          echo "----------------------------------------------------------------------------------------------------"
          echo "Env diagnostic data has been stored in <<parameters.data-dir>>"
        name: CircleCI diagnostic report (env-info)
        when: always

  memory:
    description: |
      Save memory usage information, to be stored as artifacts and inspected later
    parameters:
      data-dir:
        default: ~/.ccidiag/memory
        description: |
          Directory in which to output memory usage information (will be created if necessary)
        type: string
    steps:
    - run:
        background: true
        command: |
          echo "This command will copy memory usage information to a file, for debugging"
          echo "----------------------------------------------------------------------------------------------------"
          echo "Working directory is: $(pwd)"
          echo "Output will be stored in: <<parameters.data-dir>> (creating it if it does not exist...)"
          echo "----------------------------------------------------------------------------------------------------"
          mkdir -p <<parameters.data-dir>>
          cp $HOME/project/.circleci/.toprc ~
          top -b -c \>> <<parameters.data-dir>>/top.txt || true
          echo "----------------------------------------------------------------------------------------------------"
          echo "Memory usage information has been stored in <<parameters.data-dir>>"
        name: CircleCI diagnostic report (memory)
        when: always

  store-report:
    description: |
      Store diagnostic data as artifacts. Use after running the other diagnostic commands.
    parameters:
      data-dir:
        default: ~/.ccidiag
        description: |
          Directory to store as artifacts (should conform with the value passed to this parameter in the other diagnostic commands)
        type: string
    steps:
    - store_artifacts:
        path: <<parameters.data-dir>>

  webpack-reports:
    description: |
      Generates inspectpack reports and stores as artifacts.
    steps:
    - run:
        command: |
          mkdir -p ~/.inspectpacks
          inspectpack -s UI/js/stats.json -a duplicates -f text > ~/.inspectpacks/duplicates.txt
          inspectpack -s UI/js/stats.json -a versions -f text > ~/.inspectpacks/versions.txt
          inspectpack -s UI/js/stats.json -a sizes -f text > ~/.inspectpacks/sizes.txt
    - store_artifacts:
        path: ~/.inspectpacks

# Define executors
executors:
  test:
    parameters:
      perl:
        type: string
        default: latest
      postgres:
        type: string
        default: latest
      browser:
        type: string
        default: chrome
      coverage:
        type: integer
        default: 1
      selenium:
        type: string
        default: selenium/standalone-chrome
    docker:
      - image: ledgersmb/ledgersmb_circleci-perl:<< parameters.perl >>
      - image: ledgersmb/ledgersmb_circleci-postgres:<< parameters.postgres >>
        environment:
          POSTGRES_PASSWORD: test
      - image: << parameters.selenium >>
        environment:
          SE_OPTS: "-port 4422 "
          GRID_DEBUG: "true"
    environment:
      BROWSER: << parameters.browser >>
      COVERAGE: << parameters.coverage >>
      RELEASE_TESTING: 1
      PGHOST: localhost
      PGUSER: postgres
      PGPASSWORD: test
      LSMB_TEST_DB: 1
      LSMB_NEW_DB: lsmbinstalltest
      LSMB_BASE_URL: http://127.0.0.1:5000
      PSGI_BASE_URL: http://127.0.0.1:5762
      HARNESS_RULESFILE: t/testrules.yml

# Define jobs
jobs:
  test_webpack_chrome:
    <<: *defaults
    executor:
      name: test
      perl: '5.30'
      postgres: '11'
      browser: chrome
      selenium: selenium/standalone-chrome:3.141.59
    steps:
      - prep_env:
          perl: '5.30'
      - start_plackup
      - start_proxy
      - prove
  test_webpack_firefox:
    <<: *defaults
    executor:
      name: test
      perl: '5.30'
      postgres: '11'
      browser: firefox
      selenium: selenium/standalone-firefox:3.141.59
    steps:
      - prep_env:
          perl: '5.30'
      - start_plackup
      - start_proxy
      - prove
  test_webpack_opera:
    <<: *defaults
    executor:
      name: test
      perl: '5.30'
      postgres: '11'
      browser: operablink
      selenium: selenium/standalone-opera:3.141.59
    steps:
      - prep_env:
          perl: '5.30'
      - start_plackup
      - start_proxy
      - prove

  test_webpack_phantomjs:
    <<: *defaults
    executor:
      name: test
      perl: '5.30'
      postgres: '11'
      browser: phantomjs
      selenium: ylavoie/standalone-phantomjs:latest
    steps:
      - prep_env:
          perl: '5.30'
      - start_plackup
      - start_proxy
      - prove

# Workflows
# Tests multiple browsers, coverage and dojo
workflows:
  workflow:
    jobs:
      - test_webpack_chrome:
          filters: *job_filters
          pre-steps:
            - env-info
          post-steps:
            - memory
            - store-report
            - webpack-reports

      - test_webpack_firefox:
          filters: *job_filters

      - test_webpack_opera:
          filters: *job_filters

      - test_webpack_phantomjs:
          filters: *job_filters
