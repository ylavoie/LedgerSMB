{
    // An eslint config for the Dojo 2 code conventions
    //
    // What is done:
    //   * All Dojo 2 jshint options were reviewed and mapped to eslint. In cases where that was not
    //      possible due to rule differences or abscence of rules, TODOs were left inline.
    //   * Reviewed the eslint rules unassociated with jshint options and enabled/disabled them as
    //      seemed reasonable. TODOs were left for rules needing more discussion.
    //
    // What needs to be done:
    //   * Review written code conventions in csnover's dojo2-core README and add TODOs for new
    //      rules where necessary.
    //   * Review jshint warning messages [here](https://github.com/eslint/eslint/wiki/All-JSHint-errors)
    //       to discover other rules missing from eslint. jshint likely has some sensible, built-in
    //       rules that are unconfigurable and thus not covered by converting .jshintrc.
    //
    // How to read the config:
    //   * 0 - rule is disabled
    //   * 1 - rule is enabled but warnings will not affect the eslint exit code
    //   * 2 - rule is enabled and warnings will result in a non-zero eslint exit code

    "plugins": [
        "amd",
        //"amd-imports",
        "sort-dojo-dependency",
        "prettier"
    ],
    "parser": "babel-eslint",
    "parserOptions": {
        "ecmaVersion": 6,
        "sourceType": "module",
        "ecmaFeatures": {
            "jsx": true
        }
    },
    "env": {
        "browser": true,
        // TODO: Can environments be specified in an eslint comment?
        // TODO: Can global variable names be specified in an eslint comment?
        "node":    true,
        "amd":     true,
        "es6":     true
    },
    "extends": [
        "airbnb-base/legacy", "prettier",
        "eslint:recommended",
        "plugin:import/errors",
        "plugin:import/warnings"
    ],
    "overrides": [
        {
            "files": ["*.js"],
            "excludedFiles": ["*.dojo.js", "*/dojo/*", "*/dijit/*"]
        }
      ],
    "rules": {
        "curly": ["error", "all"],                  // Keep braces
        "func-names": 0,                            // Dojo define pattern uses unnamed functions
        "no-continue": 0,                           // Disable to avoid confusion with .continue dojo function
        "no-plusplus": 0,                           // Don't disable unary operator '++'
        "vars-on-top": 0,                           // Allow variable definition close to usage
        "no-underscore-dangle": 0,                  // Allow underscores in identifiers
        "new-cap": 0,                               // Allow constructor name to start with a lowercase letter

        //"object-curly-spacing": ["error", "always"],
        "no-multi-spaces": "error",

        "amd/no-unused-dependencies": 2,
        "amd/obsolete-dependencies": 2,
        "amd/sane-dependency-names": 2,

        //"amd-imports/no-restricted-imports": 2, 	// Restrict modules that can be imported.
        //"amd-imports/no-unexisting-imports": 2,	// Verify that imported modules exist.
        //"amd-imports/no-unused-imports": 2,	    // Verify that imported modules are used.
                                                    // If a module is imported because it has side effects,
                                                    // the imported module variable name may have the _ prefix
                                                    // or suffix to skip this rule.
        //"amd-imports/prefer-relative-imports": 2,	// Prefer relative imports within a single package
                                                    // instead of top-level package absolute imports.

        "prettier/prettier": ["error", {
                                        "bracketSpacing": true, // Print spaces between brackets in object literals.
                                        "printWidth": 80,       // Limit to 80 columns
                                        "quote-props": ["error", "consistent"], // If at least one property in an object requires quotes, quote all properties.
                                        "semi": true,           // Add a semicolon at the end of every statement.
                                        "singleQuote": false,   // Use double quotes
                                        "tabWidth": 3,          // Tabs width is 3 spaces
                                        "trailingComma": "none",// No trailing commas
                                        "useTabs": false,       // Indent lines with tabs instead of spaces.
                                        "insertPragma": true,   // Prettier can insert a special @format marker at the top of files specifying that the file has been formatted with prettier.
                                        "proseWrap": "preserve",// Prettier will wrap markdown text as-is since some services use a linebreak-sensitive renderer
        }],
        "no-restricted-syntax": ["error", "SequenceExpression"]
    }
}
